ref: Roadmap.sh

Provider is a wrapper around inheritedWidget ( base class for widgets that efficiently propagates information down the tree) to make them easier to use and more reusable. 


PROVIDER LIBRARY: 
Classes. 
1. ChangeNotifierProvider<T extends ChangeNotifier?>
Listens to a ChangeNotifier, expose it to its descendants and rebuilds dependents whenever ChangeNotifier.notifyListeners is called.
2. Consumer<T>
Obtains Provider<T> from its ancestors and passes its value to builder.
3. InheritedContext<T>
A BuildContext associated to an InheritedProvider.
4. InheritedProvider<T>
A generic implementation of an InheritedWidget.
5. MultiProvider
A provider that merges multiple providers into a single linear widget tree. It is used to improve readability and reduce boilerplate code of having to nest multiple layers of providers.
6. Provider<T>
A Provider that manages the lifecycle of the value it provides by delegating to a pair of Create and Dispose.
7. StreamProvider<T>
Listens to a Stream and exposes its content to child and descendants.
8. ValueListenableProvider<T>
Listens to a ValueListenable and exposes its current value.

Exceptions / Errors
1. ProviderNotFoundException
The error that will be thrown if Provider.of fails to find a Provider as an ancestor of the BuildContext used.
2. ProviderNullException
Called Provider.of<T> instead of Provider.of<T?> but the provider returned null.

Typedefs
1. Dispose<T> = void Function(BuildContext context, T value)
A function that disposes an object of type T.
2. UpdateShouldNotify<T> = bool Function(T previous, T current)
A function that returns true when the update from previous to current should notify listeners, if any.


The need to understand 3 concepts:

 - ChangeNotifier: ChangeNotifier is a simple class included in the Flutter SDK which provides change notifications to its listeners. In other words, if something is a ChangeNotifier, you can subscribe to its changes. (It is a form of Observable, for those familiar with the term.)
In provider, ChangeNotifier is one way to encapsulate your application state. For very simple apps, you get by with a single ChangeNotifier. In complex ones, you'll have several models, and therefore several ChangeNotifiers. (You don't need to use ChangeNotifier with provider at all, but it's an easy class to work with.)
The only code that is specific to ChangeNotifier is the call to notifyListeners(). Call this method any time the model changes in a way that might change your app's UI. Everything else in CartModel is the model itself and its business logic.

ChangeNotifier is part of flutter:foundation and doesn't depend on any higher-level classes in Flutter.


 - ChangeNotifierProvider: ChangeNotifierProvider is the widget that provides an instance of a ChangeNotifier to its descendants. It comes from the provider package.
If you want to provide more than one class, you can use MultiProvider.
We already know where to put ChangeNotifierProvider: above the widgets that need to access it. 


 - Consumer: Now that CartModel is provided to widgets in our app through the ChangeNotifierProvider declaration at the top, we can start using it.


