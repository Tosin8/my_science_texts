Ref: Simplearn. 
INTRODUCTION.

NOSQL is a non-relational database that uses key-value pairs to store and retrieve data, unlike a relational database, which stores data in rows and columns. 

A Non-Relational Database is a collection of unstructured and semi-detached items that do not store data in tabular form. 

Various types of NoSQL databases? 
1. Key Value: USAGE: Briskly changing data and high availability. Examples are Riak, Redis. 
2. Column Based: USAGE: Read/Write extensions. Examples: HBase, Cassandra etc. 
3. Document Database. USAGE: Working with occasionally changing consistent data. Example: Couchbase, MongoDB.
4. Graph Databae: USAGE: Spatial data storage. Example: Neo4j, Big data. 

WHAT IS MONGODB? 
MongoDB is a NoSQL database that stores large volumes of data in the form of documents. It removes the concept of rows of conventional and relational data models by introducing documents. 
It stores data in the form of a document in JSON likewise others like MsQL that stores data in tables. 
It stores data in COLLECTION instead of TABLES. 


Why MondoDB? 
Preferred due to its high volume of data. 
1. Open source database
2. Easy to use: Robust, highly scalable and powerful way of storing data in comparison to traditional database models. 
3. Highly Flexible: Allows to store and work on different data types in one document. 
4. Powerful Query language
5. Reliable indexing
6. Flexible schema: designed that allows to meet the ever-changing condition characteristics of Big Data applications
7. High performance: it offers incredible features like on-demand scaling, real-time resources etc to guarantee high performance of the application. 

Ref: Roadmap.sh
When to use MongoDB
1. For big data
2. Real Time Analytics: offering aggregation framework and indexing capabilities to help analyze and process data in real-time. 
3. Content Management: being able to handle content types, making it a suitable choice for content management systems. 
4. Internet of Things application: MongoDB captures and store data from a large number of devices and sensors, proving beneficial in IOT scenarios. 
5. Mobile application: it provides a flexible data model - an essential requirement for the dynamic nature and varying data types of mobile applications. 

MongoDB Basics
1. MongoDb is a NoSQl database system that stores data in flexible json like documents, making it suitable for working with large scale and unstructured data. 
* Database: stores all collections within a MongoDB instance 
* Collection: A group of related documents, similar to a table in a relational database. 
* Document: a single recored within a collection which is stored as BSON ( Binary Json) format. 
* Field: a key-value pair within a document
* _id: a unique identifier automatically generated for each document within a collection. 

2. Basic Operations
* Insert: To insert a single document, use db.collection.insertOne(). For inserting multiple documents, use db.collection.insertMany()
* Find: Fetch documents from a collection using db.collection.find() and filter the results with query criteria like {FIELD: VALUE}. To fetch only one document, using db.collection.findOne()
* Update: Updating fields or entire documents by using update operators like $SET and $UNSET with db.collection.updateOne() or db.collection.updateMany()
* Delete: Remove documents from a collection using db.collection.deleteOne() or db.collection.deleteMany() with query criteria. 
* Drop: permanently delete a collection or a db using db.collection.drop() and db.dropDatabase(). 

3. Indexes and Aggregations. 
* Indexes: improving the performance of searches by creaing indexes on fields within a collection using db.collection.createIndex() or build compound indexes for querying multiple fields. 
* Aggregations: performing complex data processing tasks like filtering, grouping , transforming and sorting using aggregation operation like $match, $group, $project and $sort. 

4. Data Modeling
MongoDB's flexible schema allows for various data modeling techniques which are: 
* Embedded documents: it store related data together in a single document, which is suitable for one to one or one to few relationship
* Normalization: store related data in separate documents with references btw them. 
* Hybrid Approach: combine embedded documents and normalization to balance performance and storage needs. 


WHAT IS MONGOBD ATLAS. 
A fully managed cloud based database service built and maintained by MongoDB. The atlas platform being available on major cloud provider e.g. AWS, Azure and Google Cloud Platform allowing developers to deploy, manage, and scale their MongoDB cluseters in a seemless and efficient way. 

Features are: 
- Database as a Service: Atlas taking care of database-related operations like backups, monitoring, scaling and security allowing developers to focus on their application logic. 
- Security: offering built-in security features. 
- Performance: providing tools for monitoring and optimizing the performance of the DB. 


MongoDB Terminology
- Database: A MongoDB database is used to store and manage a set of collections. It consists of various collections, indexes, and other essential data structures required to store the data efficiently.
- Collection: A collection in MongoDB is a group of documents. The name of a collection must be unique within its database. Collections can be viewed as the table equivalencies in a relational database.
- Document: A document is a record in a MongoDB collection. It is comprised of a set of fields, similar to a row in a relational database. However, unlike tables in a relational database, no schema or specific structure is enforced on the documents within a collection.
- Field: A field in MongoDB is a key-value pair inside a document. It can store various types of data, including strings, numbers, arrays, and other documents. Fields in MongoDB can be seen as columns in a relational database.
- Index: Indexes in MongoDB are data structures that improve the speed of common search operations. They store a small portion of the dataset in a well-organized structure. This structure allows MongoDB to search and sort documents faster by reducing the number of documents it has to scan.
- Query: A query in MongoDB is used to retrieve data from the database. It retrieves specific documents or subsets of documents from a collection based on a given condition.
- Cursor: A cursor is a pointer to the result set of a query. It allows developers to process individual documents from the result set in an efficient manner.
- Aggregation: Aggregation in MongoDB is the process of summarizing and transforming the data stored in collections. It is used to run complex analytical operations on the dataset or create summary reports.
- Replica Set: A replica set in MongoDB is a group of Mongodb instances that maintain the same data set. It provides redundancy, high availability, and automatic failover in case the primary node becomes unreachable.
- Sharding: Sharding is a method of distributing data across multiple machines. It is used in MongoDB to horizontally scale the database by partitioning the dataset into smaller, more manageable chunks called shards.




