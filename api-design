- APIs, or Application Programming Interfaces, provide a manner in which software applications communicate with each other. 

- They define the methods and data formats an application should use in order to perform tasks, like sending, retrieving, or modifying data.

THE BASICS..........
Application Programming Interfaces (APIs) are an integral part of modern development, allowing software applications to communicate and use functions from other software applications or services

HTTP Versions in API Design
___________________________________
The versions specify how versions should respond to commands, which directly impacts how well an API can communicate with other software and systems. 

HTTP Methods
___________________
It plays a significant role in API design, defining the type of request a client can make to a server. 
Common methods are: GET, POSt, PUT, DELETE and PATCH, allowing various interactions with API endpoints. 

HTTP Status Codes
_________________________
They are an essential part of API Design, providing important information about the result of a request made to a server. 
eg. 404 - signifies that a request resource could not be found on the server, 200 - for a successful HTTP request. 

________________________
HTTP Headers 

HTTP Headers play a crucial role in API Design as they provide essential information between the client and server regarding the data to be exchanged. 

Cookies
_______________
Cookies play an instrumental role in the field of API (Application Programming Interface) design. Essentially, cookies are small bits of data stored on a user’s browser that enables stateful HTTP sessions, by storing pertinent information between server communications. 

CORS under API design
CROSS-ORIGIN RESOURCE SHARING - It's a mechanism that uses HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. 
By default, web browsers prohibit web pages from making requests to a different domain than the one the web page came from. 

CORS IS THE GUIDELINE THAT LETS YOU CONFIGURE A SET OF RULES ON THE SERVER TO DEFINE WHICH TYPES OF CROSS-DOMAIN REQUESTS ARE ALLOWED, PROVIDING MUCH-NEEDED FLEXIBILITY WITHOUT COMPROMISING SECURITY. 
Understanding CORS is crucial in designing APIs that ensure safe and effective inter-domain communication. 

HTTP Caching in API Design 
__________________________________
Caching is a key apsect of API design which involves storing copies of responses to HTTP requests to speed up future requests. 
When an API receives the same request multiple times, instead of processing each request separately, it can use a previously stored response, thereby improving performance and efficiency. The cache is governed by headers on the HTTP requests and responses. Understanding and implementing HTTP caching in API design can drastically reduce latency, network traffic and improve the speed of an API.

Difference between Cookie and Cache
_______________________________________
Cookies are typically stored on the device's hard drive. These encrypted files are accessed using the web browser that stored them or dedicated web applications. Cache files are stored in the computer's RAM (Random Access Memory) for faster access, providing near-instantaneous retrieval of data in nanoseconds. 

Understand TCP/IP
______________________________
TCP: Transmission Control Prootocol
IP: Internet Protocol

TCP/IP, standing for Transmission Control Protocol/Internet Protocol, is the suite of communications protocols used to connect hosts on the Internet. It provides ordered, error-checked delivery of streams of bytes from a program on one computer to another program on another computer. If you want to understand how APIs communicate over networks, knowing the fundamental workings of TCP/IP is indispensable.

Basics of DNS
_____________________________
Domain Name System: It plays a fundamental role in the way APIs function, acting as the internet's equivalent of a phone book, interpreting human-friendly hostnames into IP addresses that APIs needs for communication. 
knowledge about DNS can significantly aid in troubleshooting connectivity issues, ensuring secure connections, and optimizing API architecture with more efficient calls.

REST Principles. 
_________________________________-
REST: Representational State Transfer - it defines a set of rules and conventions through which systems communicate over a network. 
Key Characteristics are: 
- Statelessness
- Client-Server Communication
- Cacheability
- Uniform Interface. 
The principles revolve around resources and their manipulation to achieve desired outcomes, making developers to ensure that their API design in line with web standards, and improving interoperability across different systems. 

URI Design in API
_______________________________

URI - Uniform Resource Identifier, a string of characters used to identify a name or a resource on the internet. It ensures that related resources are grouped together in a logical manner and can greately impact the usability and maintainability of an API. 

Version Strategies
________________________________
As the APIs evolve over time to meet the new business requirements and functionality enhancements, it is crucial to manage the changes in a way that doesn't break the existing client applications. 


Handling CRUD Operations in API Design
_____________________________________________________
CRUD operations: Create, Read, Update and Delete Operations. 


Building JSON/ RESTful APIs
____________________________________-
Building JSON/RESTful APIs involves designing and implementing APIs taht adhere to othe architectural constraints of REST.
These APIs use JSON (JavaScript Object Notation) as a format for information interchange, due to its lightweight, easy-to-understand, and universally accepted nature. A well-designed RESTful API, utilizing JSON, is key in developing applications that are scalable, maintainable, and easily integrated with other systems. This design approach enables the resources on a server to be accessed and manipulated using standard HTTP protocols, facilitating communication between different services and systems.


Simple JSON APIs
____________________________________--
Simple JSON (JavaScript Object Notation) APIs are a popular form of API or “Application Programming Interface” which utilises JSON to exchange data between servers and web applications. 

This method has gained prominence mainly for its simplicity, light weight, and easy readability. In the context of API design, a well-structured JSON API allows developers to efficiently interact with the backend and retrieve only the data they need in a consistent and comprehensible manner. From reducing redundant data to enabling quick parsing, Simple JSON APIs provide numerous benefits to improve the overall performance of applications.

SOAP APIs
___________________________
SOAP (Simple Object Access Protocol) APIs are a standard communication protocol system that permits programs that run on different operating systems (like Linux and Windows) to communicate using Hypertext Transfer Protocol (HTTP) and its Extensible Markup Language (XML). 

GraphQL APIs
GraphQL is an open-source data query and manipulation language for APIs, and a runtime for executing those queries with your existing data. Unlike REST, where you have predefined data return structures for each endpoint, GraphQL APIs are designed around a type system and enable the client application to precisely specify what data it needs from the server. This gives a lot of flexibility and efficiency, leading to fewer round trips to the server and significantly enhancing the performance of the client application. Whether you are building a small project or an enterprise-scale application, understanding and implementing GraphQL APIs can result in cleaner, more manageable code.

Pagination 
_______________
Pagination is a crucial aspect of API design, providing a systematic approach to handling large amounts of data in a manageable way. Instead of returning all data in a single response, which can be overwhelming and inefficient, APIs implement pagination to deliver this data in smaller, more convenient parcels.

An effective API design should carefully consider pagination style, striving for a balance between ease of use, efficiency, and scalability.

Rate Limiting in API Design
_____________________________

Rate Limiting is a critical aspect of API Design that dictates the number of API calls a client can make within a specified timeframe. This helps in managing resource allocation, preventing abuse of the API, and maintaining the overall health of the API system.

Proper rate limiting measures should be in place to ensure the API’s stability, thereby delivering a consistent and reliable service to all consumers. It works primarily by setting a limit on the frequency of client requests, thereby preventing individual users from overloading the system. It is crucial to design and implement rate limiting carefully for maintaining API availability and performance.


Idempotency in API Design
____________________________
Idempotency in API design refers to the concept where multiple identical requests have the same effect as a single request. This means that no matter how many times a client sends the same request to the server, the server’s state stays the same after the first request.


HATEOAS in API Design
_________________________
Hypertext As The Engine Of Application State (HATEOAS) is a key concept in the design of RESTful APIs (Application Programming Interfaces). It implies that the API delivers data as well as information about available interactions. 

The principle of HATEOAS can enforce a more structured, standardized approach to API design and development.

Error Handling in API Design
_______________________________
Error Handling is a crucial aspect of API design that ensures the stability, usability, and reliability of the API in production. APIs are designed to help systems communicate with each other. However, there can be instances where these systems might encounter exceptions or errors. The process of predicting, catching, and managing these error occurrences is what we refer to as ‘Error Handling’.
Configuring this appropriately provides a more robust and seamless communication experience, enabling developers to debug and rectify issues for efficiently.


GraphQL APIs
____________________________
It is an open source data query and manipulation language for APIs, and a runtime for executing those queries with existing data. 
They are designed around a type system and enable the client application to precisely specify what data it needs from the server. This gives a lot of flexibility and efficiency, leading to fewer round trips to the server and significantly enhancing the performance of the client application. 

gRPC
__________________
It is a platform agnostic serialization protocol that is used to communicate between services. It is a high performance, open source, general-purpose RPC framework that puts mobile and HTTP/2 first. It’s main use case is for communication between two different languages within the same application. 

Token Based Auth in API Design 
________________________________
Token-based authentication is a crucial aspect of API design. It involves providing the user with a token that validates their identity after they have successfully logged in. 
Once the token is obtained, users can use it to access resources and services provided by the API. This token is usually passed in the headers of subsequent HTTP requests done by the client. One key advantage of token-based auth is that tokens can be created and checked by the server without storing them persistently, which can help to scale applications more easily.

JSON Web Token (JWT) in API Design 
_________________________________________
JSON Web Tokens, or JWT, are a popular and secure method of transferring information between two parties in the domain of API design.
URL-safe means of representing claims to be transferred between two parties, they play a vital role in security and authorization in modern APIs. By encoding these claims, the information can be verified and trusted with a digital signature - ensuring that the API end-points can handle requests in a secure and reliable way. JWT is a relatively lightweight and scalable method that brings improved authentication and information exchange processes in API design.

Different API Styles
_____________________________
Commonly used API styles are: REST, SOAP, GraphQL and gRPC. 

Authentication Methods: 
______________________________
They are: Basici Auth, Token Based Auth, JWT, OAuth 2.0, Session Based Auth. 

Session-Based Auth. in API Design 
____________________________________
Application Programming Interfaces (APIs) are critical for building software applications. Among several key considerations during API design, one is deciding how to implement authentication and security. Session Based Authentication is one popular way to apply security in API design.

This method revolves around the server creating a session for the user after they successfully log in, associating it with a session identifier. This Session ID is then stored client-side within a cookie. On subsequent requests, the server validates the Session ID before processing the API call. The server will destroy the session after the user logs out, thereby invalidating the Session ID.

Authorization Methods in API Design
___________________________________________
In API design, authorization methods play a crucial role in ensuring the security and integrity of data transactions. They are the mechanisms through which an API identifies and validates a user, system, or application before granting them access to specific resources. These methods include Basic Authentication, OAuth, Token-based authentication, JSON Web Tokens (JWT), and API Key based, among others. So, understanding these methods enhances the ability to design APIs that effectively protect resources while allowing necessary access.

Article: https://konghq.com/blog/engineering/common-api-authentication-methods

Authorization Methods are: Role Based Access Control (RBAC ) and Attribute Based Access Control ( ABAC ) 
* Role-Based access Control
_____________________________

Role-Based Access Control (RBAC) is a method of managing authorization in API design that assigns system access to users based on their role within an organization. RBAC is crucial in controlling which endpoints a user can call, and what operations they are allowed to execute. In the context of API design, RBAC ensures appropriate levels of access for different types of users to guarantee data security and integrity. It simplifies the process of security administration by assigning privileges based on a user’s job function, rather than on an individual basis.

* Attribute Based Access Control 
_____________________________________
Attribute Based Access Control (ABAC) is a flexible and powerful authorization method in the realm of API Design. Distinct from Role-Based Access Control (RBAC), which relies on predefined roles and permissions, ABAC uses attributes to build policies and make decisions. These attributes can be associated with the user, the action they want to perform, targeted resources, or the environment. 


API Keys and Management
___________________________
API keys and management is an integral part of API design. An API key is a unique identifier used to authenticate a user, developer, or calling program to an API. This ensures security and control over API endpoints, as only those with a valid API key can make requests. 
API Management, on the other hand, refers to the practices and tools that enable an organization to govern and monitor its API usage. It involves all the aspects of managing APIs including design, deployment, documentation, security, versioning, and analytics. 

API Documentation Tools
___________________________________
API Documentation Tools are instrumental in conveying the intricacies of API design to both technical developers and non-technical stakeholders. These tools help in creating comprehensive, easy-to-understand, and searchable documentation encompassing all the elements of an API such as its functions, classes, return types, arguments, and more.

Common Vulnerabilities in API Design 
_____________________________________
API design is a critical component of modern software development, enabling various applications to communicate and share data. However, as the use of APIs expands, so does the potential for security vulnerabilities. Understanding common vulnerabilities in API design is crucial to protecting sensitive data and maintaining a secure system.

Best Practices in API Design 
_________________________________
* Simplicity
* Consistency
* Security
* Proper Documentation. 

API SECURITY
________________________
API Security refers to the practices and products that are used to secure application programming interfaces (APIs). In the context of design, it is an essential component that helps ensure that a deployed API achieves its objectives in a safe and secure manner. This includes safeguarding the data, preventing unauthorized access, and protecting the system that hosts the API.



